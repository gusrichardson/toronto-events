{"version":3,"sources":["firebase.js","components/Header/Header.js","components/ResponseContainer/ResponseContainer.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Header","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","htmlFor","placeholder","id","onChange","handleCategoryChoice","value","handlePriceChoice","type","Component","ResponseContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSaveToFB","e","preventDefault","dbRef","database","ref","selectedEvent","name","description","console","log","state","setState","push","href","website","src","image","alt","substring","date","Footer","url","proxy","App","event","category","target","onlyFree","removeItem","itemKey","remove","loadingResults","getEventsFromAPI","getTimeStamp","time","Date","now","unixTime","Math","floor","start_date","isLoading","axios","method","dataType","headers","Authorization","concat","params","limit","categories","is_free","then","result","resultsArray","data","events","filter","is_canceled","length","alert","catch","error","savedEvents","_this2","on","eventItem","val","key","shortDescription","_this3","components_Header_Header","anchor_link_default","map","components_ResponseContainer_ResponseContainer","image_url","time_start","event_site_url","onClick","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be98930d.chunk.js","sourcesContent":["import firebase from 'firebase';\n// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyBKqbtDbOU87DXS3r_jEyaM2drG-eTrtCY\",\n    authDomain: \"firebasicstutorial.firebaseapp.com\",\n    databaseURL: \"https://firebasicstutorial.firebaseio.com\",\n    projectId: \"firebasicstutorial\",\n    storageBucket: \"firebasicstutorial.appspot.com\",\n    messagingSenderId: \"924177388749\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <div className=\"titleContainer\">\n                    <h1>Toronto Events</h1>\n                    <h2>find out what's going on in the city!</h2>\n                </div>\n                <form className=\"eventForm\" onSubmit={this.props.handleSubmit}>\n                    <h3>Choose your event preferences</h3>\n                    <label htmlFor=\"category\">Category</label>\n                    <select placeholder=\"Type event category\" id=\"category\" onChange={this.props.handleCategoryChoice}>\n                        <option value=\"music\">Music</option>\n                        <option value=\"visual-arts\">Visual Arts</option>\n                        <option value=\"performing-arts\">Performing Arts</option>\n                        <option value=\"film\">Film</option>\n                        <option value=\"lectures-books\">Lectures and Books</option>\n                        <option value=\"fashion\">Fashion</option>\n                        <option value=\"food-and-drink\">Food and Drink</option>\n                        <option value=\"festivals-fairs\">Festivals and Fairs</option>\n                        <option value=\"charities\">Charities</option>\n                        <option value=\"sports-active-life\">Sports and Active Life</option>\n                        <option value=\"nightlife\">Nightlife</option>\n                        <option value=\"kids-family\">Kids and Family</option>\n                        <option value=\"other\">Other</option>\n                    </select>\n                    <label htmlFor=\"onlyFree\">Free or paid events</label>\n                    <select placeholder=\"Only show events that are free\" id=\"onlyFree\" onChange={this.props.handlePriceChoice}>\n                        <option value=\"false\">Free and paid events</option>\n                        <option value=\"true\">Only free events</option>\n                    </select>\n                    <input type=\"submit\" id=\"submitForm\" value=\"Submit form\" />\n                </form>\n            </header>\n        )\n    }\n\n}\n\nexport default Header; ","import React, { Component } from 'react';\nimport firebase from '../../firebase';\nimport './ResponseContainer.css';\n\nclass ResponseContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedEvent: []\n        }\n    }\n\n    handleSaveToFB = (e) => {\n        e.preventDefault();\n        const dbRef = firebase.database().ref();\n        const selectedEvent = {\n            name: this.props.name,\n            description: this.props.description\n        }\n        console.log(this.props.name, \"this is this name\", this.state, \"this is the state\")\n        this.setState({\n            selectedEvent: selectedEvent\n        })\n        dbRef.push(selectedEvent)\n    }\n\n    render() {\n        // { let shortDescription = this.props.description.substring(0, 200) + '...' }\n        return (\n            <form className=\"responseItem\" onSubmit={this.handleSaveToFB}>\n                <a href={this.props.website}>\n                    <div className=\"imgContainer\">\n                        <img src={this.props.image} alt={this.props.name} />\n                    </div>\n                </a>\n                <div className=\"descriptionContainer\">\n                    <h3>{this.props.name}</h3>\n                    {/* {cut down the size of the description to 100 characters}  */}\n                    <p>{this.props.description.substring(0, 100) + '...'}</p>\n                    {/* {Split up date props to show date and time seperately} */}\n                    <p>Date: {this.props.date.substring(0, 10)} Time: {this.props.date.substring(11)}</p>\n                </div>\n                <button className=\"saveEvent\">Save this Event!</button>\n            </form>\n        )\n    }\n}\n\nexport default ResponseContainer;","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <h3>Copyright © 2019 Gus Richardson</h3>\n                <p>Skyline photo credit: Luis Enrique Carvajal   <span>|   Pattern background created at SVGBackgrounds.com</span></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport axios from 'axios';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css'\nimport AnchorLink from 'react-anchor-link-smooth-scroll'\nimport Header from './components/Header/Header';\nimport ResponseContainer from './components/ResponseContainer/ResponseContainer';\nimport Footer from './components/Footer/Footer';\n\n\nconst apiKey = `T4ppS0vgQo0YhVouBtsAnFcusw0O72e9rjlL7igvSTjfF2H_FsZYz17lO8d2A7Zpt1tz7TcTOrQmNgGsnUhDBu7wBtzbkZI7SeWxQTq_bXGtxcQ1jnQ1KnpJHhmxXHYx`\n\nconst url = `https://api.yelp.com/v3/events?location=toronto`;\nconst proxy = `https://cors-anywhere.herokuapp.com/`;\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      category: \"\",\n      start_date: 0,\n      onlyFree: false,\n      events: [],\n      savedEvents: [],\n      isLoading: \"\",\n    }\n  }\n\n  // take user's event category preference and update state\n  handleCategoryChoice = (event) => {\n    this.setState({\n      category: event.target.value\n    })\n    console.log(this.state);\n  }\n\n  handlePriceChoice = (event) => {\n    let priceChoice = event.target.value;\n    if (priceChoice === \"true\") {\n      this.setState({\n        onlyFree: true\n      })\n    } else {\n      this.setState({\n        onlyFree: false\n      })\n    }\n  }\n\n  //target a saved event item by its key and remove from firebase\n  removeItem = (itemKey) => {\n    const dbRef = firebase.database().ref(itemKey);\n    dbRef.remove();\n  }\n\n  //trigger API call when user submits form\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.loadingResults();\n    this.getEventsFromAPI();\n    console.log(this.state)\n  }\n\n  //get a UNIX time stamp so that start date can be updated to today's date\n  getTimeStamp = () => {\n    //this returns milliseconds\n    const time = Date.now();\n    //convert millisecond time into regular seconds/ UNIX time and then subtract 14400 seconds to convert from UTC to ET\n    const unixTime = Math.floor(time / 1000) - 14400;\n    this.setState({\n      start_date: unixTime\n    })\n  }\n\n  // show that results are loading after user submits form\n  loadingResults = () => {\n    this.setState({\n      isLoading: true\n    })\n  }\n\n\n  getEventsFromAPI = () => {\n    console.log('getting events from API')\n    axios({\n      url: proxy + url,\n      method: `GET`,\n      dataType: `json`,\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      },\n      params: {\n        limit: 10,\n        start_date: this.state.start_date,\n        categories: this.state.category,\n        is_free: this.state.onlyFree,\n      }\n    }).then((result) => {\n      //filter the response and only include events that are not canceled\n      const resultsArray = result.data.events.filter(event => event.is_canceled === false)\n      if (resultsArray.length === 0) {\n        alert('Sorry, not much going on. Why not try another category!')\n      }\n      this.setState({\n        events: resultsArray,\n        isLoading: false\n      })\n    }).catch((error) => {\n      alert('Sorry, something went wrong');\n    })\n  }\n\n  // When component mounts load saved Events from firebase and update state\n  componentDidMount() {\n    //Get timestamp when component mounts\n    this.getTimeStamp();\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (event) => {\n      const eventItem = event.val();\n      const savedEvents = [];\n      //take each item from firebase and push their values into state\n      for (let key in eventItem) {\n        //shorten the length of the event descriptions\n        let shortDescription = eventItem[key].description.substring(0, 180) + '...';\n        savedEvents.push({\n          key: key,\n          name: eventItem[key].name,\n          description: shortDescription\n          // description: eventItem[key].description\n        })\n      }\n      this.setState({\n        savedEvents: savedEvents\n      })\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          handleCategoryChoice={this.handleCategoryChoice}\n          handlePriceChoice={this.handlePriceChoice}\n          handleSubmit={this.handleSubmit}\n        />\n        <main className=\"results\" id=\"responseContainer\">\n          {/* { if the isLoading state is set to false return the \"here's what happening\" notice. If isLoading is set to null do nothing} */}\n          { //OPEN JAVASCRIPT\n            this.state.isLoading === false ? (\n              <div>\n                <h2 className=\"resultsTitle\">Here's what's happening!</h2>\n                <AnchorLink href='#responseContainer'><i className=\"fa fa-arrow-circle-down\"></i></AnchorLink>\n              </div>\n            ) : (null)\n            //CLOSE JAVASCRIPT\n          }\n          <div className=\"responseFlex wrapper\">\n            {/* { if the isLoading state is set to True show the \"loading your results\" title} */}\n            { //OPEN JAVASCRIPT\n              this.state.isLoading ? (\n                <div>\n                  <h2 className=\"resultsTitle\">Loading your results...</h2>\n                  <i className=\"fa fa-spinner fa-spin resultsTitle\"></i>\n                </div>\n              ) : (\n                  // {if isLoading returns to False then the events have loaded. Map over the events and return their results in the ResponseContainer component}\n                  this.state.events.map(event => {\n                    return (\n                      <ResponseContainer\n                        name={event.name}\n                        image={event.image_url}\n                        description={event.description}\n                        date={event.time_start}\n                        website={event.event_site_url}\n                      />\n                    )\n                  })\n                )\n              //CLOSE JAVASCRIPT\n            }\n          </div>\n          <div className=\"savedEvents wrapper\" id=\"savedEvents\">\n            <h2 className=\"resultsTitle\">Saved Events</h2>\n            <AnchorLink href='#savedEvents'><i className=\"fa fa-arrow-circle-down\"></i></AnchorLink>\n            <div className=\"savedEventsFlex\">\n              {/* {once the saved events have been added to state map through each item and return its contents to the DOM}  */}\n              { //OPEN JAVASCRIPT\n                this.state.savedEvents.map((eventItem) => {\n                  return (\n                    <div className=\"savedEventItem\">\n                      <div className=\"savedItemText\">\n                        <h3>{eventItem.name}</h3>\n                        <p>{eventItem.description}</p>\n                      </div>\n                      <button onClick={() => this.removeItem(eventItem.key)}>Remove Item</button>\n                    </div>\n                  )\n                })\n                //CLOSE JAVASCRIPT\n              }\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css'\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}